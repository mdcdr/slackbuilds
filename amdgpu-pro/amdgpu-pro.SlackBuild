#!/bin/sh
# Generated by Alien's SlackBuild Toolkit: http://slackware.com/~alien/AST
# Copyright 2009, 2010, 2011, 2012, 2013, 2014  Eric Hameleers, Eindhoven, Netherlands

# Slackware build script for amdgpu-pro

# Based on http://slackbuilds.org/template.SlackBuild

# Copyright 2017 BV. <david.cla2@gmail.com> <add city, country where you live>
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

function kernel_gt() { test "$(printf '%s\n' "$@" | sort -V | head -n 1)" != "$1"; }

PRGNAM=amdgpu-pro
VERSION=${VERSION:-17.10-401251}
PKGVER="${VERSION%-*}"
BUILD=${BUILD:-1}
TAG=${TAG:-_bst}
BUILDMOD=${BUILDMOD:-1}
REPLACELIBS=${REPLACELIBS:-no}
INSTALL32BIT=${INSTALL32BIT:-auto}
NUMJOBS=${NUMJOBS:-`nproc`}

# Automatically determine the architecture we're building on:
if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    i?86) export ARCH=i486 ;;
    arm*) export ARCH=arm ;;
    # Unless $ARCH is already set, use uname -m for all other archs:
       *) export ARCH=$( uname -m ) ;;
  esac
fi

set -e

CWD=$(pwd)
TMP=${TMP:-/tmp/SBo}
PKG=$TMP/package-$PRGNAM
OUTPUT=${OUTPUT:-/tmp}
EXFILES=$TMP/$PRGNAM-$VERSION/files
KVER=`uname -r`
RUNKVER=$KVER
if [ -z "$KERNELSRC" ]; then
KDIR="/lib/modules/$KVER/build"
else
KDIR=$KERNELSRC
cd $KDIR
KVER=$(make kernelversion) || { echo "Can't get kernel version!"; exit 1; }
fi
MODSRC=${MODSRC:-$PKG/usr/src/$PRGNAM-$VERSION}

rm -rf $PKG
mkdir -p $TMP $PKG $OUTPUT
cd $TMP
rm -rf $PRGNAM-$VERSION
tar xvf $CWD/$PRGNAM-$VERSION.tar.xz
cd $PRGNAM-$VERSION

if [ "$ARCH" = "x86_64" ]; then
  DEBARCH=amd64
  AMDLIB=/opt/amdgpu-pro/lib/x86_64-linux-gnu
  AMDLIB32=/opt/amdgpu-pro/lib/i386-linux-gnu
else
  DEBARCH=i386
  AMDLIB=/opt/amdgpu-pro/lib/i386-linux-gnu
  INSTALL32BIT=no
fi

cd $PKG
echo Extracting packages
for i in $TMP/$PRGNAM-$VERSION/*_{$DEBARCH,all}.deb; do
 ar p $i data.tar.xz | unxz | tar x
done

if [ "$INSTALL32BIT" = "auto" ]; then
 [ -e /lib/ld-linux.so.2 ] && { INSTALL32BIT=yes; echo "Detected multilib system"; }
fi

if [ "$INSTALL32BIT" = "yes" ]; then
 echo Extracting 32bit packages
 ar p $TMP/$PRGNAM-$VERSION/libdrm-amdgpu-pro-amdgpu1_*i386.deb data.tar.xz | unxz | tar x
 ar p $TMP/$PRGNAM-$VERSION/libgbm1-amdgpu-pro_*i386.deb data.tar.xz | unxz | tar x
 ar p $TMP/$PRGNAM-$VERSION/libgl1-amdgpu-pro-glx_*i386.deb data.tar.xz | unxz | tar x
 ar p $TMP/$PRGNAM-$VERSION/libgl1-amdgpu-pro-dri_*i386.deb data.tar.xz | unxz | tar x
 ar p $TMP/$PRGNAM-$VERSION/libgles2-amdgpu-pro_*i386.deb data.tar.xz | unxz | tar x
 ar p $TMP/$PRGNAM-$VERSION/vulkan-amdgpu-pro_*i386.deb data.tar.xz | unxz | tar x
 ar p $TMP/$PRGNAM-$VERSION/libvdpau-amdgpu-pro_*i386.deb data.tar.xz | unxz | tar x
 ar p $TMP/$PRGNAM-$VERSION/libopencl1-amdgpu-pro_*i386.deb data.tar.xz | unxz | tar x
 ar p $TMP/$PRGNAM-$VERSION/opencl-amdgpu-pro-icd_*i386.deb data.tar.xz | unxz | tar x
 ar p $TMP/$PRGNAM-$VERSION/libdrm2-amdgpu-pro_*i386.deb data.tar.xz | unxz | tar x
 ar p $TMP/$PRGNAM-$VERSION/libegl1-amdgpu-pro_*i386.deb data.tar.xz | unxz | tar x
fi

chown -R root:root .

cd $PKG/usr/src/$PRGNAM-$VERSION
patch -p1 < $CWD/kernel-4.4.patch

if kernel_gt $KVER "4.8.99"; then
 patch -p1 < $CWD/kernel-4.9.patch
fi

if kernel_gt $KVER "4.9.99"; then
 patch -p1 < $CWD/kernel-4.10.patch
fi

patch -p1 < $CWD/fwdir.patch
#patch < $CWD/xorgpath.patch
[ "$ARCH" = "x86_64" ] && sed -i "s|/usr/lib|/usr/lib64|g" $PKG/usr/share/X11/xorg.conf.d/10-amdgpu-pro.conf

if [ "$BUILDMOD" = "1" ]; then
 echo Building kernel modules
 if [ ! -e $KDIR/include ] || [ ! -f $KDIR/.config ]; then
  echo "Can't find usable kernel source!"
  exit 1
 fi

 if [ ! -f $KDIR/Module.symvers ]; then
  pushd $KDIR >/dev/null
  echo Preparing kernel for compiling modules
  make modules_prepare || { echo "Can't prepare kernel!"; exit 1; }
  popd >/dev/null
 fi
 
 cd $MODSRC
 ./pre-build.sh $KVER $PKG/lib/firmware/$KVER $MODSRC
 if [ ! "$RUNKVER" = "$KVER" ] && [ ! -e "$MODSRC/include/rename_symbol.h" ]; then
  touch $MODSRC/include/rename_symbol.h
 fi
 make -j$NUMJOBS -C $KDIR M=$MODSRC || { echo "Kernel module build failed!"; exit 1; }
 strip --strip-debug $MODSRC/amd/amdgpu/amdgpu.ko
 strip --strip-debug $MODSRC/amd/amdkcl/amdkcl.ko
 strip --strip-debug $MODSRC/ttm/amdttm.ko
 mkdir -p $PKG/lib/modules/$KVER/extra/amd/amdgpu
 mkdir -p $PKG/lib/modules/$KVER/extra/amd/amdkcl
 mkdir -p $PKG/lib/modules/$KVER/extra/ttm
 cp $MODSRC/amd/amdgpu/amdgpu.ko $PKG/lib/modules/$KVER/extra/amd/amdgpu/
 cp $MODSRC/amd/amdkcl/amdkcl.ko $PKG/lib/modules/$KVER/extra/amd/amdkcl/
 cp $MODSRC/ttm/amdttm.ko $PKG/lib/modules/$KVER/extra/ttm
 make -C $KDIR M=$MODSRC clean
 mkdir -p $PKG/etc/depmod.d
 echo "override amdgpu * extra/amd/amdgpu" > $PKG/etc/depmod.d/amdgpu-pro.conf
fi

cp $CWD/build_kernel_mod.sh $PKG/opt/amdgpu-pro/bin/
cp $CWD/restorelibs.sh $PKG/opt/amdgpu-pro/bin/
chmod +x $PKG/opt/amdgpu-pro/bin/build_kernel_mod.sh
chmod +x $PKG/opt/amdgpu-pro/bin/restorelibs.sh

if [ ! -e /lib64/libtinfo.so.5 ] && [ ! -e /usr/lib64/libtinfo.so.5 ]; then
 mkdir -p $PKG/lib64
 cd $PKG/lib64/
 ln -s libncurses.so.5 libtinfo.so.5
fi

mkdir -p $PKG/opt/amdgpu-pro/backup

#mv $PKG/etc/gbm/gbm.conf $PKG/etc/gbm/gbm.conf.new
#mv $PKG/etc/xdg/gstomx.conf $PKG/etc/xdg/gstomx.conf.new

#mkdir -p $PKG/etc/ld.so.conf.d
#echo "/opt/amdgpu-pro/lib/x86_64-linux-gnu" > $PKG/etc/ld.so.conf.d/amdgpu-pro-x86_64.conf

cd $PKG

# Compress man pages
# If man pages are installed to /usr/share/man instead, you'll need to either
# add the --mandir=/usr/man flag to configure or move them manually after the
# make install process is run.
find $PKG/opt/amdgpu-pro/share/man -type f -exec gzip -9 {} \;
for i in $( find $PKG/opt/amdgpu-pro/share/man -type l ) ; do
  ln -s $( readlink $i ).gz $i.gz ; rm $i
done

mkdir -p $PKG/usr/doc/$PRGNAM-$VERSION
#cp -a \
#  <documentation> \
#  $PKG/usr/doc/$PRGNAM-$VERSION
cat $CWD/$PRGNAM.SlackBuild > $PKG/usr/doc/$PRGNAM-$VERSION/$PRGNAM.SlackBuild

mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc
if [ $REPLACELIBS = "yes" ]; then
 cat $CWD/doinst2.sh > $PKG/install/doinst.sh
 if [ "$INSTALL32BIT" = "yes" ]; then
  cat $CWD/doinst3.sh >> $PKG/install/doinst.sh
 fi
else
 cat $CWD/doinst.sh > $PKG/install/doinst.sh
fi

cat >> $PKG/install/doinst.sh <<EOF
if ! grep $AMDLIB etc/ld.so.conf > /dev/null
then
sed -i '1i$AMDLIB' etc/ld.so.conf
fi
EOF

LIBPATH=/opt/amdgpu-pro/lib/x86_64-linux-gnu

if [ "$INSTALL32BIT" = "yes" ]; then
cat >> $PKG/install/doinst.sh <<EOF
if ! grep $AMDLIB32 etc/ld.so.conf > /dev/null
then
sed -i '1i$AMDLIB32' etc/ld.so.conf
fi
EOF
LIBPATH=$LIBPATH:/opt/amdgpu-pro/lib/i386-linux-gnu
fi

mkdir -p $PKG/etc/profile.d
cat > $PKG/etc/profile.d/amdgpu-pro.sh <<EOF
#!/bin/sh
export LD_LIBRARY_PATH="$LIBPATH:\$LD_LIBRARY_PATH"
EOF

cat > $PKG/etc/profile.d/amdgpu-pro.csh <<EOF
#!/bin/csh
setenv LD_LIBRARY_PATH "$LIBPATH:\${LD_LIBRARY_PATH}"
EOF

chmod +x $PKG/etc/profile.d/amdgpu-pro.sh
chmod +x $PKG/etc/profile.d/amdgpu-pro.csh

[ "$BUILDMOD" = "1" ] && echo "depmod -a" >> $PKG/install/doinst.sh

[ "$BUILDMOD" = "2" ] && echo "/opt/amdgpu-pro/bin/build_kernel_mod.sh" >> $PKG/install/doinst.sh

cd $PKG
/sbin/makepkg -l y -c n $OUTPUT/$PRGNAM-$PKGVER-$ARCH-$BUILD$TAG.${PKGTYPE:-tgz}
